// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CompoundedEarnings extends ethereum.Event {
  get params(): CompoundedEarnings__Params {
    return new CompoundedEarnings__Params(this);
  }
}

export class CompoundedEarnings__Params {
  _event: CompoundedEarnings;

  constructor(event: CompoundedEarnings) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountAdded(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalDeposited(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositFeeSet extends ethereum.Event {
  get params(): DepositFeeSet__Params {
    return new DepositFeeSet__Params(this);
  }
}

export class DepositFeeSet__Params {
  _event: DepositFeeSet;

  constructor(event: DepositFeeSet) {
    this._event = event;
  }

  get depositFeePercent(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get depositFeePrecision(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FeeTaken extends ethereum.Event {
  get params(): FeeTaken__Params {
    return new FeeTaken__Params(this);
  }
}

export class FeeTaken__Params {
  _event: FeeTaken;

  constructor(event: FeeTaken) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PostSaleWithdrawFeeCharged extends ethereum.Event {
  get params(): PostSaleWithdrawFeeCharged__Params {
    return new PostSaleWithdrawFeeCharged__Params(this);
  }
}

export class PostSaleWithdrawFeeCharged__Params {
  _event: PostSaleWithdrawFeeCharged;

  constructor(event: PostSaleWithdrawFeeCharged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountStake(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountRewards(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeOwnershipTransferred extends ethereum.Event {
  get params(): StakeOwnershipTransferred__Params {
    return new StakeOwnershipTransferred__Params(this);
  }
}

export class StakeOwnershipTransferred__Params {
  _event: StakeOwnershipTransferred;

  constructor(event: StakeOwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class XavaStakingContract__getPendingAndDepositedForUsersResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class XavaStakingContract__getWithdrawFeeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class XavaStakingContract__poolInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getLpToken(): Address {
    return this.value0;
  }

  getAllocPoint(): BigInt {
    return this.value1;
  }

  getLastRewardTimestamp(): BigInt {
    return this.value2;
  }

  getAccERC20PerShare(): BigInt {
    return this.value3;
  }

  getTotalDeposits(): BigInt {
    return this.value4;
  }
}

export class XavaStakingContract__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getRewardDebt(): BigInt {
    return this.value1;
  }

  getTokensUnlockTime(): BigInt {
    return this.value2;
  }
}

export class XavaStakingContract extends ethereum.SmartContract {
  static bind(address: Address): XavaStakingContract {
    return new XavaStakingContract("XavaStakingContract", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositFeePercent(): BigInt {
    let result = super.call(
      "depositFeePercent",
      "depositFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_depositFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositFeePercent",
      "depositFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositFeePrecision(): BigInt {
    let result = super.call(
      "depositFeePrecision",
      "depositFeePrecision():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_depositFeePrecision(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositFeePrecision",
      "depositFeePrecision():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposited(_pid: BigInt, _user: Address): BigInt {
    let result = super.call(
      "deposited",
      "deposited(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_deposited(_pid: BigInt, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposited",
      "deposited(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endTimestamp(): BigInt {
    let result = super.call("endTimestamp", "endTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_endTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endTimestamp", "endTimestamp():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc20(): Address {
    let result = super.call("erc20", "erc20():(address)", []);

    return result[0].toAddress();
  }

  try_erc20(): ethereum.CallResult<Address> {
    let result = super.tryCall("erc20", "erc20():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPendingAndDepositedForUsers(
    users: Array<Address>,
    pid: BigInt
  ): XavaStakingContract__getPendingAndDepositedForUsersResult {
    let result = super.call(
      "getPendingAndDepositedForUsers",
      "getPendingAndDepositedForUsers(address[],uint256):(uint256[],uint256[])",
      [
        ethereum.Value.fromAddressArray(users),
        ethereum.Value.fromUnsignedBigInt(pid)
      ]
    );

    return new XavaStakingContract__getPendingAndDepositedForUsersResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_getPendingAndDepositedForUsers(
    users: Array<Address>,
    pid: BigInt
  ): ethereum.CallResult<
    XavaStakingContract__getPendingAndDepositedForUsersResult
  > {
    let result = super.tryCall(
      "getPendingAndDepositedForUsers",
      "getPendingAndDepositedForUsers(address[],uint256):(uint256[],uint256[])",
      [
        ethereum.Value.fromAddressArray(users),
        ethereum.Value.fromUnsignedBigInt(pid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XavaStakingContract__getPendingAndDepositedForUsersResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getWithdrawFee(
    userAddress: Address,
    amountToWithdraw: BigInt,
    _pid: BigInt
  ): XavaStakingContract__getWithdrawFeeResult {
    let result = super.call(
      "getWithdrawFee",
      "getWithdrawFee(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromUnsignedBigInt(amountToWithdraw),
        ethereum.Value.fromUnsignedBigInt(_pid)
      ]
    );

    return new XavaStakingContract__getWithdrawFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getWithdrawFee(
    userAddress: Address,
    amountToWithdraw: BigInt,
    _pid: BigInt
  ): ethereum.CallResult<XavaStakingContract__getWithdrawFeeResult> {
    let result = super.tryCall(
      "getWithdrawFee",
      "getWithdrawFee(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromUnsignedBigInt(amountToWithdraw),
        ethereum.Value.fromUnsignedBigInt(_pid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XavaStakingContract__getWithdrawFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  isNonceUsed(param0: Bytes): boolean {
    let result = super.call("isNonceUsed", "isNonceUsed(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isNonceUsed(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isNonceUsed", "isNonceUsed(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSignatureUsed(param0: Bytes): boolean {
    let result = super.call(
      "isSignatureUsed",
      "isSignatureUsed(bytes):(bool)",
      [ethereum.Value.fromBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_isSignatureUsed(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSignatureUsed",
      "isSignatureUsed(bytes):(bool)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paidOut(): BigInt {
    let result = super.call("paidOut", "paidOut():(uint256)", []);

    return result[0].toBigInt();
  }

  try_paidOut(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("paidOut", "paidOut():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pending(_pid: BigInt, _user: Address): BigInt {
    let result = super.call("pending", "pending(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_pid),
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_pending(_pid: BigInt, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pending",
      "pending(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInfo(param0: BigInt): XavaStakingContract__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new XavaStakingContract__poolInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<XavaStakingContract__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XavaStakingContract__poolInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  postSaleWithdrawPenaltyLength(): BigInt {
    let result = super.call(
      "postSaleWithdrawPenaltyLength",
      "postSaleWithdrawPenaltyLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_postSaleWithdrawPenaltyLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "postSaleWithdrawPenaltyLength",
      "postSaleWithdrawPenaltyLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  postSaleWithdrawPenaltyPercent(): BigInt {
    let result = super.call(
      "postSaleWithdrawPenaltyPercent",
      "postSaleWithdrawPenaltyPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_postSaleWithdrawPenaltyPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "postSaleWithdrawPenaltyPercent",
      "postSaleWithdrawPenaltyPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  postSaleWithdrawPenaltyPrecision(): BigInt {
    let result = super.call(
      "postSaleWithdrawPenaltyPrecision",
      "postSaleWithdrawPenaltyPrecision():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_postSaleWithdrawPenaltyPrecision(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "postSaleWithdrawPenaltyPrecision",
      "postSaleWithdrawPenaltyPrecision():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerSecond(): BigInt {
    let result = super.call(
      "rewardPerSecond",
      "rewardPerSecond():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerSecond",
      "rewardPerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  salesFactory(): Address {
    let result = super.call("salesFactory", "salesFactory():(address)", []);

    return result[0].toAddress();
  }

  try_salesFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("salesFactory", "salesFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  startTimestamp(): BigInt {
    let result = super.call("startTimestamp", "startTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startTimestamp",
      "startTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBurnedFromUser(param0: Address): BigInt {
    let result = super.call(
      "totalBurnedFromUser",
      "totalBurnedFromUser(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalBurnedFromUser(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBurnedFromUser",
      "totalBurnedFromUser(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPending(): BigInt {
    let result = super.call("totalPending", "totalPending():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPending(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalPending", "totalPending():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewards(): BigInt {
    let result = super.call("totalRewards", "totalRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRewards", "totalRewards():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalXavaRedistributed(): BigInt {
    let result = super.call(
      "totalXavaRedistributed",
      "totalXavaRedistributed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalXavaRedistributed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalXavaRedistributed",
      "totalXavaRedistributed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(
    param0: BigInt,
    param1: Address
  ): XavaStakingContract__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new XavaStakingContract__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<XavaStakingContract__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XavaStakingContract__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class ApproveStakeOwnershipTransferCall extends ethereum.Call {
  get inputs(): ApproveStakeOwnershipTransferCall__Inputs {
    return new ApproveStakeOwnershipTransferCall__Inputs(this);
  }

  get outputs(): ApproveStakeOwnershipTransferCall__Outputs {
    return new ApproveStakeOwnershipTransferCall__Outputs(this);
  }
}

export class ApproveStakeOwnershipTransferCall__Inputs {
  _call: ApproveStakeOwnershipTransferCall;

  constructor(call: ApproveStakeOwnershipTransferCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveStakeOwnershipTransferCall__Outputs {
  _call: ApproveStakeOwnershipTransferCall;

  constructor(call: ApproveStakeOwnershipTransferCall) {
    this._call = call;
  }
}

export class ClaimApprovedStakeOwnershipCall extends ethereum.Call {
  get inputs(): ClaimApprovedStakeOwnershipCall__Inputs {
    return new ClaimApprovedStakeOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimApprovedStakeOwnershipCall__Outputs {
    return new ClaimApprovedStakeOwnershipCall__Outputs(this);
  }
}

export class ClaimApprovedStakeOwnershipCall__Inputs {
  _call: ClaimApprovedStakeOwnershipCall;

  constructor(call: ClaimApprovedStakeOwnershipCall) {
    this._call = call;
  }

  get wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimApprovedStakeOwnershipCall__Outputs {
  _call: ClaimApprovedStakeOwnershipCall;

  constructor(call: ClaimApprovedStakeOwnershipCall) {
    this._call = call;
  }
}

export class CompoundCall extends ethereum.Call {
  get inputs(): CompoundCall__Inputs {
    return new CompoundCall__Inputs(this);
  }

  get outputs(): CompoundCall__Outputs {
    return new CompoundCall__Outputs(this);
  }
}

export class CompoundCall__Inputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CompoundCall__Outputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _erc20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardPerSecond(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _startTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _salesFactory(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _depositFeePercent(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _depositFeePrecision(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class RedistributeXavaCall extends ethereum.Call {
  get inputs(): RedistributeXavaCall__Inputs {
    return new RedistributeXavaCall__Inputs(this);
  }

  get outputs(): RedistributeXavaCall__Outputs {
    return new RedistributeXavaCall__Outputs(this);
  }
}

export class RedistributeXavaCall__Inputs {
  _call: RedistributeXavaCall;

  constructor(call: RedistributeXavaCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountToRedistribute(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedistributeXavaCall__Outputs {
  _call: RedistributeXavaCall;

  constructor(call: RedistributeXavaCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class SetAdminCall extends ethereum.Call {
  get inputs(): SetAdminCall__Inputs {
    return new SetAdminCall__Inputs(this);
  }

  get outputs(): SetAdminCall__Outputs {
    return new SetAdminCall__Outputs(this);
  }
}

export class SetAdminCall__Inputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAdminCall__Outputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }
}

export class SetDepositFeeCall extends ethereum.Call {
  get inputs(): SetDepositFeeCall__Inputs {
    return new SetDepositFeeCall__Inputs(this);
  }

  get outputs(): SetDepositFeeCall__Outputs {
    return new SetDepositFeeCall__Outputs(this);
  }
}

export class SetDepositFeeCall__Inputs {
  _call: SetDepositFeeCall;

  constructor(call: SetDepositFeeCall) {
    this._call = call;
  }

  get _depositFeePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _depositFeePrecision(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDepositFeeCall__Outputs {
  _call: SetDepositFeeCall;

  constructor(call: SetDepositFeeCall) {
    this._call = call;
  }
}

export class SetPostSaleWithdrawPenaltyPercentAndLengthCall extends ethereum.Call {
  get inputs(): SetPostSaleWithdrawPenaltyPercentAndLengthCall__Inputs {
    return new SetPostSaleWithdrawPenaltyPercentAndLengthCall__Inputs(this);
  }

  get outputs(): SetPostSaleWithdrawPenaltyPercentAndLengthCall__Outputs {
    return new SetPostSaleWithdrawPenaltyPercentAndLengthCall__Outputs(this);
  }
}

export class SetPostSaleWithdrawPenaltyPercentAndLengthCall__Inputs {
  _call: SetPostSaleWithdrawPenaltyPercentAndLengthCall;

  constructor(call: SetPostSaleWithdrawPenaltyPercentAndLengthCall) {
    this._call = call;
  }

  get _postSaleWithdrawPenaltyPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _postSaleWithdrawPenaltyLength(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _postSaleWithdrawPenaltyPrecision(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetPostSaleWithdrawPenaltyPercentAndLengthCall__Outputs {
  _call: SetPostSaleWithdrawPenaltyPercentAndLengthCall;

  constructor(call: SetPostSaleWithdrawPenaltyPercentAndLengthCall) {
    this._call = call;
  }
}

export class SetSalesFactoryCall extends ethereum.Call {
  get inputs(): SetSalesFactoryCall__Inputs {
    return new SetSalesFactoryCall__Inputs(this);
  }

  get outputs(): SetSalesFactoryCall__Outputs {
    return new SetSalesFactoryCall__Outputs(this);
  }
}

export class SetSalesFactoryCall__Inputs {
  _call: SetSalesFactoryCall;

  constructor(call: SetSalesFactoryCall) {
    this._call = call;
  }

  get _salesFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSalesFactoryCall__Outputs {
  _call: SetSalesFactoryCall;

  constructor(call: SetSalesFactoryCall) {
    this._call = call;
  }
}

export class SetTokensUnlockTimeCall extends ethereum.Call {
  get inputs(): SetTokensUnlockTimeCall__Inputs {
    return new SetTokensUnlockTimeCall__Inputs(this);
  }

  get outputs(): SetTokensUnlockTimeCall__Outputs {
    return new SetTokensUnlockTimeCall__Outputs(this);
  }
}

export class SetTokensUnlockTimeCall__Inputs {
  _call: SetTokensUnlockTimeCall;

  constructor(call: SetTokensUnlockTimeCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokensUnlockTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetTokensUnlockTimeCall__Outputs {
  _call: SetTokensUnlockTimeCall;

  constructor(call: SetTokensUnlockTimeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signatureExpirationTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
